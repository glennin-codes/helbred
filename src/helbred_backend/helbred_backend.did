type AuthPayload = record { signature : blob; public_key : text };
type CustomError = variant {
  UserAlreadyExists;
  Custom : text;
  RecordNotFound;
  UserNotFound;
};
type HealthRecord = record {
  personal_info : PersonalInfo;
  medicational_changing_data : vec Treatment;
};
type PersonalInfo = record {
  dob : text;
  public_key : text;
  name : text;
  email : text;
  location : text;
};
type Result = variant { Ok : bool; Err : CustomError };
type Result_1 = variant { Ok : nat64; Err : CustomError };
type Result_2 = variant { Ok : HealthRecord; Err : CustomError };
type Result_3 = variant { Ok; Err : CustomError };
type Treatment = record {
  hospital : text;
  prescription : text;
  date : text;
  diagnosis : text;
  email : text;
  lab_results : text;
  doctor_name : text;
};
service : {
  authenticate : (AuthPayload) -> (Result);
  insert_initial_health_record : (PersonalInfo) -> (Result_1);
  query_health_record : (text) -> (Result_2) query;
  update_medical_data : (text, Treatment) -> (Result_3);
}
